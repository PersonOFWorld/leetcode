//给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。
//
//示例 1:
//
//输入: "abcabcbb"
//输出: 3
//解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。
//示例 2:
//
//输入: "bbbbb"
//输出: 1
//解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。
//示例 3:
//
//输入: "pwwkew"
//输出: 3
//解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3。
//     请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。

package main

import "fmt"

func main() {
        fmt.Println(lengthOfLongestSubstring("abcabcbb"))
}

func lengthOfLongestSubstring(s string) int {
        if len(s) == 0 {
                return 0
        }

        if len(s) == 1 {
                return 1
        }

        lengthArr := make([]int, 0)

        index := 0
        length := 0
        charMp := make(map[byte]int)

        for i := 0; i < len(s); {
                ch := s[i]
                if _, exist := charMp[ch]; !exist {
                        charMp[ch] = 1
                        length += 1
                        i++
                } else {
                        lengthArr = append(lengthArr, length)
                        index += 1
                        i = index
                        length = 0
                        charMp = make(map[byte]int)
                }
        }

        lengthArr = append(lengthArr, length)

        lengthMax := 0
        for _, v := range lengthArr {
                if v > lengthMax {
                        lengthMax = v
                }
        }

        return lengthMax
}
