//将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。
//
//比如输入字符串为 "LEETCODEISHIRING" 行数为 3 时，排列如下：
//
//L   C   I   R
//E T O E S I I G
//E   D   H   N
//之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如："LCIRETOESIIGEDHN"。
//
//请你实现这个将字符串进行指定行数变换的函数：
//
//string convert(string s, int numRows);
//示例 1:
//
//输入: s = "LEETCODEISHIRING", numRows = 3
//输出: "LCIRETOESIIGEDHN"
//示例 2:
//
//输入: s = "LEETCODEISHIRING", numRows = 4
//输出: "LDREOEIIECIHNTSG"
//解释:
//
//L     D     R
//E   O E   I I
//E C   I H   N
//T     S     G

numRows = 4
行标   第0列 第1列 第2列 第3列
0       1    0     0    1  
1       1    0     1    1   
2       1    1     0    1  
3       1    0     0    1  
numRows = 5
行标   第0列 第1列 第2列 第3列 第4列 第5列
0       1    0     0    0    1    0
1       1    0     0    1    1    0
2       1    0     1    0    1    0
3       1    1     0    0    1    1
4       1    0     0    0    1    0

//思路：将Z字排列拆开，按照numRows - 1列为一组，观察规律
package main

import "fmt"

func main() {
        fmt.Println(convert("LEETCODEISHIRING", 3))
}

func convert(s string, numRows int) string {
        size := len(s)
        arr := make([][]string, numRows)
        for i := 0; i < numRows; i++ {
                arr[i] = make([]string, size)
        }
        columns := 0
        index := 0
        rows := 0
        for i := 0; i < size; i++ {
                if rows == numRows {
                        rows = 0
                        index++
                        columns++
                }

                if columns == numRows-1 {
                        columns = 0
                }

                if (columns+rows+1)%numRows == 0 || columns == 0 || (columns+1)%numRows == 0 {
                        arr[rows][index] = string(s[i])
                } else {
                        arr[rows][index] = " "
                        i--
                }

                rows++
        }

        res := ""

        for _, v := range arr {
                for _, v2 := range v {
                        if v2 != " " {
                                res += v2
                        }
                }
        }

        return res
