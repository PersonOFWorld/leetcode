给你一个字符串 s 和一个字符规律 p，请你来实现一个支持 '.' 和 '*' 的正则表达式匹配。

'.' 匹配任意单个字符
'*' 匹配零个或多个前面的那一个元素
所谓匹配，是要涵盖 整个 字符串 s的，而不是部分字符串。

说明:

s 可能为空，且只包含从 a-z 的小写字母。
p 可能为空，且只包含从 a-z 的小写字母，以及字符 . 和 *。
示例 1:

输入:
s = "aa"
p = "a"
输出: false
解释: "a" 无法匹配 "aa" 整个字符串。
示例 2:

输入:
s = "aa"
p = "a*"
输出: true
解释: 因为 '*' 代表可以匹配零个或多个前面的那一个元素, 在这里前面的元素就是 'a'。因此，字符串 "aa" 可被视为 'a' 重复了一次。
示例 3:

输入:
s = "ab"
p = ".*"
输出: true
解释: ".*" 表示可匹配零个或多个（'*'）任意字符（'.'）。
示例 4:

输入:
s = "aab"
p = "c*a*b"
输出: true
解释: 因为 '*' 表示零个或多个，这里 'c' 为 0 个, 'a' 被重复一次。因此可以匹配字符串 "aab"。
示例 5:

输入:
s = "mississippi"
p = "mis*is*p*."
输出: false

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/regular-expression-matching
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

package main

import (
	"fmt"
	"strings"
)

func main() {
	fmt.Printf("result:%v\n", isMatch("mississippi", "mis*is*p*."))
}

func isMatch(s string, p string) bool {
	//字符规律p长度不够，且没有通用字符不可能匹配
	if len(p) < len(s) && !strings.Contains(p, "*") && !strings.Contains(p, ".") {
		return false
	}

	if s == "" {
		return true
	}

	if p == "" {
		return false
	}

	if p == ".*" {
		return true
	}

	pIndex := 0
	isStart := false
	for i := 0; i < len(s); i++ {
		pChar := string(p[pIndex])
		sChar := string(s[i])
		fmt.Printf("i:%d||pChar:%v\n", i, pChar)
		fmt.Printf("pIndex:%d||sChar:%v\n", pIndex, sChar)

		if pChar == sChar {
			pIndex++
			isStart = true
			continue
		}

		if pChar == "." {
			pIndex++
			isStart = true
			continue
		}

		if i > 0 && string(s[i]) == string(s[i-1]) && pChar == "*" {
			fmt.Println("common char")
			isStart = true
			continue
		} else {
			if isStart {
				pIndex++
				if string(p[pIndex]) == sChar || string(p[pIndex]) == "." {
					continue
				} else {
					return false
				}
			} else {
				fmt.Println("here")
				pIndex++
				i--
				continue
			}
		}
	}

	return true
}
